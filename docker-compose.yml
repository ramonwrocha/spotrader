services:
  sportradar-worker:
    build:
      context: .
      dockerfile: src/Sportradar.Service.Worker/Dockerfile
    container_name: spotrader-worker
    depends_on:
      postgres:
         condition: service_healthy
    networks:
      - sportradar-service-network
    healthcheck:
      test: ["CMD", "echo", "healthy"]
      interval: 10s
      timeout: 5s
      retries: 5

  sportradar-api:
     build:
       context: .
       dockerfile: src/Spotrader.Service.Api/Dockerfile
     container_name: spotrader-api
     restart: unless-stopped
     ports:
       - "7100:80"
       - "7101:443"
     environment:
       - ASPNETCORE_ENVIRONMENT=Development
       - ASPNETCORE_URLS=http://+:80;https://+:443
       - PathBase=/
     depends_on:
       sportradar-worker:
         condition: service_healthy
       postgres:
         condition: service_healthy
     networks:
       - sportradar-service-network    

  postgres:
    image: postgres:latest
    container_name: postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=spotrader
      - POSTGRES_USER=spotrader
      - POSTGRES_PASSWORD=spotrader
    ports:
      - "5432:5432"
    networks:
      - sportradar-service-network
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U spotrader"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    restart: unless-stopped
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@admin.com
      - PGADMIN_DEFAULT_PASSWORD=admin123
    ports:
      - "7200:80"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - sportradar-service-network

networks:
  sportradar-service-network:
    driver: bridge

volumes:
  postgres_data: